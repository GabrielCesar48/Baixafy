#!/usr/bin/env python3
"""
BaixaFy - Aplicativo Desktop para baixar m√∫sicas do Spotify
Vers√£o: 1.0.0
Autor: Seu Nome

Depend√™ncias necess√°rias:
pip install customtkinter spotdl pillow
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import os
import sys
import subprocess
import json
from pathlib import Path
from typing import List, Dict, Optional
import time

# Configura√ß√£o do tema
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class SpotifyDownloader:
    """Classe respons√°vel por gerenciar downloads do Spotify via spotDL."""
    
    def __init__(self):
        self.is_spotdl_available = self._verificar_spotdl()
    
    def _verificar_spotdl(self) -> bool:
        """
        Verifica se o spotDL est√° instalado no sistema.
        
        Returns:
            bool: True se spotDL estiver dispon√≠vel, False caso contr√°rio
        """
        try:
            result = subprocess.run(['spotdl', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            return result.returncode == 0
        except (FileNotFoundError, subprocess.TimeoutExpired):
            return False
    
    def buscar_musicas_playlist(self, url: str) -> List[Dict]:
        """
        Busca informa√ß√µes das m√∫sicas de uma playlist ou m√∫sica individual.
        
        Args:
            url (str): URL do Spotify (playlist ou m√∫sica)
            
        Returns:
            List[Dict]: Lista com informa√ß√µes das m√∫sicas
        """
        try:
            # Comando para listar m√∫sicas sem baixar
            cmd = ['spotdl', 'list', url]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                raise Exception(f"Erro ao buscar playlist: {result.stderr}")
            
            # Processar sa√≠da do spotdl
            musicas = []
            linhas = result.stdout.strip().split('\n')
            
            for i, linha in enumerate(linhas):
                linha = linha.strip()
                if linha and not linha.startswith('Found') and not linha.startswith('Processing'):
                    # Extrair informa√ß√µes da linha
                    if ' - ' in linha:
                        musicas.append({
                            'id': i,
                            'nome': linha,
                            'url': url if '/' not in linha else None,
                            'selecionada': True,
                            'status': 'Aguardando'
                        })
            
            # Se n√£o encontrou m√∫sicas na sa√≠da, pode ser uma m√∫sica individual
            if not musicas and url:
                nome_musica = url.split('/')[-1].replace('?', ' - ').split('?')[0]
                musicas.append({
                    'id': 0,
                    'nome': f"M√∫sica do link: {nome_musica}",
                    'url': url,
                    'selecionada': True,
                    'status': 'Aguardando'
                })
            
            return musicas
            
        except subprocess.TimeoutExpired:
            raise Exception("Timeout ao buscar playlist. Tente novamente.")
        except Exception as e:
            raise Exception(f"Erro ao processar playlist: {str(e)}")
    
    def baixar_musica(self, url: str, pasta_destino: str, callback_progresso=None) -> bool:
        """
        Baixa uma m√∫sica espec√≠fica do Spotify.
        
        Args:
            url (str): URL da m√∫sica no Spotify
            pasta_destino (str): Pasta onde salvar o arquivo
            callback_progresso (callable): Fun√ß√£o para atualizar progresso
            
        Returns:
            bool: True se download foi bem-sucedido
        """
        try:
            cmd = [
                'spotdl',
                url,
                '--output', pasta_destino,
                '--format', 'mp3',
                '--bitrate', '320k'
            ]
            
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE, text=True)
            
            # Simular progresso (spotdl n√£o fornece progresso real facilmente)
            for i in range(0, 101, 10):
                if callback_progresso:
                    callback_progresso(i)
                time.sleep(0.3)
                
                # Verificar se processo ainda est√° rodando
                if process.poll() is not None:
                    break
            
            process.wait()
            
            if callback_progresso:
                callback_progresso(100)
            
            return process.returncode == 0
            
        except Exception as e:
            print(f"Erro no download: {e}")
            return False

class BaixaFyApp:
    """Aplicativo principal do BaixaFy."""
    
    def __init__(self):
        """Inicializa a aplica√ß√£o."""
        self.root = ctk.CTk()
        self.downloader = SpotifyDownloader()
        self.musicas_lista = []
        self.pasta_destino = self._obter_pasta_musicas_padrao()
        
        self._configurar_janela()
        self._criar_interface()
        
    def _obter_pasta_musicas_padrao(self) -> str:
        """
        Obt√©m a pasta padr√£o de m√∫sicas do Windows.
        
        Returns:
            str: Caminho para pasta M√∫sica do usu√°rio
        """
        if os.name == 'nt':  # Windows
            return str(Path.home() / "Music")
        else:  # Linux/Mac
            return str(Path.home() / "Music")
    
    def _configurar_janela(self):
        """Configura a janela principal da aplica√ß√£o."""
        self.root.title("üéµ BaixaFy - Spotify Downloader")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # √çcone da janela (se tiver um arquivo de √≠cone)
        try:
            self.root.iconbitmap("baixafy_icon.ico")
        except:
            pass  # Ignora se n√£o encontrar o √≠cone
    
    def _criar_interface(self):
        """Cria todos os elementos da interface gr√°fica."""
        
        # Header com t√≠tulo
        header_frame = ctk.CTkFrame(self.root)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        title_label = ctk.CTkLabel(
            header_frame, 
            text="üéµ BaixaFy", 
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=15)
        
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="Baixe suas m√∫sicas favoritas do Spotify",
            font=ctk.CTkFont(size=14)
        )
        subtitle_label.pack(pady=(0, 15))
        
        # Frame para URL e busca
        url_frame = ctk.CTkFrame(self.root)
        url_frame.pack(fill="x", padx=20, pady=10)
        
        url_label = ctk.CTkLabel(url_frame, text="üîó Cole a URL do Spotify:")
        url_label.pack(anchor="w", padx=15, pady=(15, 5))
        
        # Campo de entrada da URL
        self.url_entry = ctk.CTkEntry(
            url_frame,
            placeholder_text="https://open.spotify.com/playlist/...",
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.url_entry.pack(fill="x", padx=15, pady=(0, 10))
        
        # Bot√£o de pesquisa
        self.btn_pesquisar = ctk.CTkButton(
            url_frame,
            text="üîç Pesquisar M√∫sicas",
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            command=self._pesquisar_musicas
        )
        self.btn_pesquisar.pack(pady=(0, 15))
        
        # Frame para sele√ß√£o de pasta
        pasta_frame = ctk.CTkFrame(self.root)
        pasta_frame.pack(fill="x", padx=20, pady=10)
        
        pasta_label = ctk.CTkLabel(pasta_frame, text="üìÅ Pasta de destino:")
        pasta_label.pack(anchor="w", padx=15, pady=(15, 5))
        
        pasta_row = ctk.CTkFrame(pasta_frame)
        pasta_row.pack(fill="x", padx=15, pady=(0, 15))
        
        self.pasta_entry = ctk.CTkEntry(
            pasta_row,
            height=35,
            font=ctk.CTkFont(size=11)
        )
        self.pasta_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.pasta_entry.insert(0, self.pasta_destino)
        
        btn_selecionar_pasta = ctk.CTkButton(
            pasta_row,
            text="Escolher Pasta",
            width=120,
            height=35,
            command=self._selecionar_pasta
        )
        btn_selecionar_pasta.pack(side="right")
        
        # Frame para lista de m√∫sicas
        self.musicas_frame = ctk.CTkFrame(self.root)
        self.musicas_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        musicas_label = ctk.CTkLabel(
            self.musicas_frame, 
            text="üé∂ M√∫sicas encontradas:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        musicas_label.pack(anchor="w", padx=15, pady=(15, 10))
        
        # Scrollable frame para lista de m√∫sicas
        self.scroll_frame = ctk.CTkScrollableFrame(self.musicas_frame)
        self.scroll_frame.pack(fill="both", expand=True, padx=15, pady=(0, 15))
        
        # Frame para bot√µes de a√ß√£o
        actions_frame = ctk.CTkFrame(self.root)
        actions_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Bot√µes de sele√ß√£o
        select_frame = ctk.CTkFrame(actions_frame)
        select_frame.pack(fill="x", padx=15, pady=(15, 10))
        
        btn_selecionar_todas = ctk.CTkButton(
            select_frame,
            text="‚úÖ Selecionar Todas",
            width=150,
            command=self._selecionar_todas
        )
        btn_selecionar_todas.pack(side="left", padx=(0, 10))
        
        btn_desselecionar_todas = ctk.CTkButton(
            select_frame,
            text="‚ùå Desselecionar Todas",
            width=150,
            command=self._desselecionar_todas
        )
        btn_desselecionar_todas.pack(side="left")
        
        # Bot√£o principal de download
        self.btn_download = ctk.CTkButton(
            actions_frame,
            text="‚¨áÔ∏è Baixar M√∫sicas Selecionadas",
            height=50,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="green",
            hover_color="darkgreen",
            command=self._iniciar_download
        )
        self.btn_download.pack(fill="x", padx=15, pady=(0, 15))
        
        # Status bar
        self.status_label = ctk.CTkLabel(
            self.root,
            text="üîÑ Verificando depend√™ncias...",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(pady=(0, 10))
        
        # Verificar se SpotDL est√° dispon√≠vel (mas n√£o bloquear o app)
        if not self.downloader.is_spotdl_available:
            self._mostrar_erro_spotdl()
        else:
            self._atualizar_status("‚úÖ Pronto para usar! SpotDL est√° funcionando.")
    
    def _instalar_spotdl_automatico(self):
        """Tenta instalar SpotDL automaticamente."""
        self._atualizar_status("üì¶ Instalando SpotDL... aguarde...")
        
        # Desabilitar interface durante instala√ß√£o
        self.btn_pesquisar.configure(state="disabled")
        
        def instalar_thread():
            try:
                import subprocess
                import sys
                
                # Tentar instalar spotdl
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'install', 'spotdl'
                ], capture_output=True, text=True, timeout=120)
                
                if result.returncode == 0:
                    # Verificar se funcionou
                    self.downloader = SpotifyDownloader()
                    if self.downloader.is_spotdl_available:
                        self.root.after(0, self._instalacao_sucesso)
                    else:
                        self.root.after(0, self._instalacao_erro, "SpotDL instalado mas n√£o est√° funcionando")
                else:
                    self.root.after(0, self._instalacao_erro, result.stderr)
                    
            except subprocess.TimeoutExpired:
                self.root.after(0, self._instalacao_erro, "Timeout na instala√ß√£o")
            except Exception as e:
                self.root.after(0, self._instalacao_erro, str(e))
        
        # Executar instala√ß√£o em thread separada
        thread = threading.Thread(target=instalar_thread)
        thread.daemon = True
        thread.start()
    
    def _instalacao_sucesso(self):
        """Callback quando SpotDL √© instalado com sucesso."""
        self.btn_pesquisar.configure(state="normal")
        self._atualizar_status("‚úÖ SpotDL instalado com sucesso!")
        messagebox.showinfo(
            "Instala√ß√£o Conclu√≠da",
            "‚úÖ SpotDL foi instalado com sucesso!\n\n"
            "Agora voc√™ pode usar todas as funcionalidades do BaixaFy."
        )
    
    def _instalacao_erro(self, erro):
        """Callback quando h√° erro na instala√ß√£o do SpotDL."""
        self.btn_pesquisar.configure(state="normal")
        self._atualizar_status("‚ùå Erro na instala√ß√£o do SpotDL")
        messagebox.showerror(
            "Erro na Instala√ß√£o",
            f"‚ùå N√£o foi poss√≠vel instalar o SpotDL automaticamente:\n\n"
            f"{erro}\n\n"
            "Tente instalar manualmente:\n"
            "1. Abra o terminal\n"
            "2. Execute: pip install spotdl"
        )
    
    def _mostrar_erro_spotdl(self):
        """Mostra op√ß√µes se spotDL n√£o estiver instalado."""
        resposta = messagebox.askyesno(
            "SpotDL n√£o encontrado",
            "O SpotDL n√£o est√° instalado!\n\n"
            "Para usar o BaixaFy, voc√™ precisa instalar o SpotDL.\n\n"
            "Deseja que eu tente instalar automaticamente?\n\n"
            "Clique 'Sim' para instalar automaticamente\n"
            "Clique 'N√£o' para instru√ß√µes manuais"
        )
        
        if resposta:
            self._instalar_spotdl_automatico()
        else:
            messagebox.showinfo(
                "Instala√ß√£o Manual",
                "Para instalar o SpotDL manualmente:\n\n"
                "1. Abra o terminal/prompt de comando\n"
                "2. Execute: pip install spotdl\n"
                "3. Reinicie o BaixaFy\n\n"
                "O aplicativo continuar√° funcionando, mas os downloads n√£o funcionar√£o sem o SpotDL."
            )
            self._atualizar_status("‚ö†Ô∏è SpotDL n√£o instalado - use 'Pesquisar' ou 'Baixar' para instalar")
    
    def _pesquisar_musicas(self):
        """Pesquisa m√∫sicas da URL fornecida."""
        url = self.url_entry.get().strip()
        
        if not url:
            messagebox.showwarning("URL vazia", "Por favor, cole uma URL do Spotify!")
            return
        
        if not url.startswith('https://open.spotify.com/'):
            messagebox.showerror("URL inv√°lida", "Use apenas URLs do Spotify!")
            return
        
        # Verificar se SpotDL est√° dispon√≠vel
        if not self.downloader.is_spotdl_available:
            resposta = messagebox.askyesno(
                "SpotDL Necess√°rio",
                "O SpotDL n√£o est√° instalado!\n\n"
                "Deseja tentar instalar automaticamente?"
            )
            if resposta:
                self._instalar_spotdl_automatico()
            return
        
        self._atualizar_status("üîç Buscando m√∫sicas...")
        self.btn_pesquisar.configure(state="disabled", text="Buscando...")
        
        # Executar busca em thread separada
        thread = threading.Thread(target=self._buscar_musicas_thread, args=(url,))
        thread.daemon = True
        thread.start()
    
    def _buscar_musicas_thread(self, url: str):
        """
        Thread para buscar m√∫sicas sem travar a interface.
        
        Args:
            url (str): URL do Spotify para buscar
        """
        try:
            musicas = self.downloader.buscar_musicas_playlist(url)
            
            # Atualizar interface na thread principal
            self.root.after(0, self._mostrar_musicas, musicas)
            
        except Exception as e:
            self.root.after(0, self._erro_busca, str(e))
    
    def _mostrar_musicas(self, musicas: List[Dict]):
        """
        Mostra a lista de m√∫sicas encontradas na interface.
        
        Args:
            musicas (List[Dict]): Lista de m√∫sicas para exibir
        """
        self.musicas_lista = musicas
        
        # Limpar lista anterior
        for widget in self.scroll_frame.winfo_children():
            widget.destroy()
        
        # Adicionar cada m√∫sica com checkbox
        for musica in musicas:
            musica_frame = ctk.CTkFrame(self.scroll_frame)
            musica_frame.pack(fill="x", pady=5)
            
            # Checkbox para sele√ß√£o
            checkbox_var = tk.BooleanVar(value=musica['selecionada'])
            checkbox = ctk.CTkCheckBox(
                musica_frame,
                text=musica['nome'],
                variable=checkbox_var,
                font=ctk.CTkFont(size=12)
            )
            checkbox.pack(anchor="w", padx=15, pady=10)
            
            # Armazenar refer√™ncia ao checkbox
            musica['checkbox_var'] = checkbox_var
            
            # Label de status
            status_label = ctk.CTkLabel(
                musica_frame,
                text=musica['status'],
                font=ctk.CTkFont(size=10),
                text_color="gray"
            )
            status_label.pack(anchor="e", padx=15, pady=(0, 10))
            musica['status_label'] = status_label
        
        self._atualizar_status(f"‚úÖ {len(musicas)} m√∫sica(s) encontrada(s)!")
        self.btn_pesquisar.configure(state="normal", text="üîç Pesquisar M√∫sicas")
    
    def _erro_busca(self, erro: str):
        """
        Trata erros na busca de m√∫sicas.
        
        Args:
            erro (str): Mensagem de erro
        """
        messagebox.showerror("Erro na busca", f"Erro ao buscar m√∫sicas:\n{erro}")
        self._atualizar_status("‚ùå Erro na busca. Tente novamente.")
        self.btn_pesquisar.configure(state="normal", text="üîç Pesquisar M√∫sicas")
    
    def _selecionar_pasta(self):
        """Abre di√°logo para selecionar pasta de destino."""
        pasta = filedialog.askdirectory(
            title="Escolha a pasta para salvar as m√∫sicas",
            initialdir=self.pasta_destino
        )
        
        if pasta:
            self.pasta_destino = pasta
            self.pasta_entry.delete(0, tk.END)
            self.pasta_entry.insert(0, pasta)
    
    def _selecionar_todas(self):
        """Seleciona todas as m√∫sicas da lista."""
        for musica in self.musicas_lista:
            if 'checkbox_var' in musica:
                musica['checkbox_var'].set(True)
    
    def _desselecionar_todas(self):
        """Desseleciona todas as m√∫sicas da lista."""
        for musica in self.musicas_lista:
            if 'checkbox_var' in musica:
                musica['checkbox_var'].set(False)
    
    def _iniciar_download(self):
        """Inicia o download das m√∫sicas selecionadas."""
        if not self.musicas_lista:
            messagebox.showwarning("Nenhuma m√∫sica", "Primeiro pesquise por m√∫sicas!")
            return
        
        # Verificar se SpotDL est√° dispon√≠vel
        if not self.downloader.is_spotdl_available:
            resposta = messagebox.askyesno(
                "SpotDL Necess√°rio",
                "O SpotDL n√£o est√° instalado!\n\n"
                "Deseja tentar instalar automaticamente?"
            )
            if resposta:
                self._instalar_spotdl_automatico()
            return
        
        # Verificar quais m√∫sicas est√£o selecionadas
        musicas_selecionadas = [
            musica for musica in self.musicas_lista
            if 'checkbox_var' in musica and musica['checkbox_var'].get()
        ]
        
        if not musicas_selecionadas:
            messagebox.showwarning("Nenhuma selecionada", "Selecione pelo menos uma m√∫sica!")
            return
        
        # Verificar pasta de destino
        pasta = self.pasta_entry.get().strip()
        if not pasta:
            messagebox.showwarning("Pasta inv√°lida", "Escolha uma pasta v√°lida!")
            return
        
        # Criar pasta se n√£o existir
        try:
            Path(pasta).mkdir(parents=True, exist_ok=True)
        except Exception as e:
            messagebox.showerror("Erro na pasta", f"Erro ao criar pasta:\n{e}")
            return
        
        # Desabilitar bot√£o durante download
        self.btn_download.configure(state="disabled", text="Baixando...")
        
        # Iniciar download em thread separada
        thread = threading.Thread(
            target=self._download_thread, 
            args=(musicas_selecionadas, pasta)
        )
        thread.daemon = True
        thread.start()
    
    def _download_thread(self, musicas: List[Dict], pasta: str):
        """
        Thread para fazer download das m√∫sicas.
        
        Args:
            musicas (List[Dict]): Lista de m√∫sicas para baixar
            pasta (str): Pasta de destino
        """
        url_original = self.url_entry.get().strip()
        sucessos = 0
        
        for i, musica in enumerate(musicas):
            # Atualizar status na interface
            self.root.after(0, self._atualizar_status_musica, musica, "‚è≥ Baixando...")
            
            try:
                # Download real com spotDL
                sucesso = self._baixar_musica_real(url_original, pasta, musica)
                
                if sucesso:
                    sucessos += 1
                    self.root.after(0, self._atualizar_status_musica, musica, "‚úÖ Conclu√≠do")
                else:
                    self.root.after(0, self._atualizar_status_musica, musica, "‚ùå Erro")
                    
            except Exception as e:
                print(f"Erro no download: {e}")
                self.root.after(0, self._atualizar_status_musica, musica, f"‚ùå Erro: {str(e)[:20]}")
        
        # Reabilitar bot√£o
        self.root.after(0, self._finalizar_download, len(musicas), sucessos)
    
    def _baixar_musica_real(self, url: str, pasta: str, musica: Dict) -> bool:
        """
        Faz o download real de uma m√∫sica usando spotDL.
        
        Args:
            url (str): URL original do Spotify
            pasta (str): Pasta de destino
            musica (Dict): Dados da m√∫sica
            
        Returns:
            bool: True se sucesso
        """
        try:
            cmd = [
                'spotdl',
                url,
                '--output', pasta,
                '--format', 'mp3',
                '--bitrate', '320k'
            ]
            
            # Executar comando spotDL
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            return result.returncode == 0
            
        except subprocess.TimeoutExpired:
            print("Timeout no download")
            return False
        except Exception as e:
            print(f"Erro no download: {e}")
            return False
    
    def _atualizar_status_musica(self, musica: Dict, status: str):
        """
        Atualiza o status de uma m√∫sica espec√≠fica.
        
        Args:
            musica (Dict): Dados da m√∫sica
            status (str): Novo status
        """
        if 'status_label' in musica:
            musica['status_label'].configure(text=status)
        musica['status'] = status
    
    def _finalizar_download(self, total: int, sucessos: int):
        """
        Finaliza o processo de download.
        
        Args:
            total (int): Total de m√∫sicas processadas
            sucessos (int): N√∫mero de downloads bem-sucedidos
        """
        self.btn_download.configure(state="normal", text="‚¨áÔ∏è Baixar M√∫sicas Selecionadas")
        
        if sucessos == total:
            self._atualizar_status(f"üéâ Download conclu√≠do! {sucessos} m√∫sica(s) baixada(s).")
            messagebox.showinfo(
                "Download Conclu√≠do",
                f"‚úÖ {sucessos} de {total} m√∫sica(s) baixada(s) com sucesso!\n\n"
                f"üìÅ Pasta: {self.pasta_entry.get()}"
            )
        elif sucessos > 0:
            self._atualizar_status(f"‚ö†Ô∏è Parcialmente conclu√≠do: {sucessos}/{total} m√∫sica(s).")
            messagebox.showwarning(
                "Download Parcial",
                f"‚ö†Ô∏è {sucessos} de {total} m√∫sica(s) baixada(s).\n\n"
                f"Algumas m√∫sicas falharam. Verifique sua conex√£o.\n\n"
                f"üìÅ Pasta: {self.pasta_entry.get()}"
            )
        else:
            self._atualizar_status("‚ùå Falha no download. Verifique sua conex√£o.")
            messagebox.showerror(
                "Falha no Download",
                "‚ùå Nenhuma m√∫sica foi baixada com sucesso.\n\n"
                "Poss√≠veis causas:\n"
                "‚Ä¢ Problemas de conex√£o\n"
                "‚Ä¢ M√∫sicas n√£o dispon√≠veis\n"
                "‚Ä¢ SpotDL com problemas"
            )
    
    def _atualizar_status(self, mensagem: str):
        """
        Atualiza a barra de status.
        
        Args:
            mensagem (str): Nova mensagem de status
        """
        self.status_label.configure(text=mensagem)
    
    def executar(self):
        """Inicia a aplica√ß√£o."""
        self.root.mainloop()

def main():
    """Fun√ß√£o principal do programa."""
    try:
        app = BaixaFyApp()
        app.executar()
    except Exception as e:
        messagebox.showerror("Erro Fatal", f"Erro ao iniciar aplica√ß√£o:\n{e}")
        sys.exit(1)

if __name__ == "__main__":
    main()