#!/usr/bin/env python3
"""
BaixaFy - Baixador de M√∫sicas do Spotify (Vers√£o Port√°til Completa)
Execut√°vel que funciona direto, sem precisar instalar nada.

Inclui todas as depend√™ncias embarcadas.
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import os
import sys
import subprocess
import re
from pathlib import Path
import time
import json
import urllib.request
import urllib.parse

# Configura√ß√£o do tema
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

class SpotifyDownloader:
    """Classe para baixar m√∫sicas convertendo Spotify ‚Üí YouTube ‚Üí MP3."""
    
    def __init__(self):
        """Inicializa o downloader."""
        self.disponivel = self._verificar_ytdlp()
    
    def _verificar_ytdlp(self) -> bool:
        """Verifica se yt-dlp est√° dispon√≠vel."""
        try:
            import yt_dlp
            return True
        except ImportError:
            return False
    
    def _extrair_info_spotify(self, url: str) -> dict:
        """
        Extrai informa√ß√µes b√°sicas de uma URL do Spotify.
        
        Args:
            url (str): URL do Spotify
            
        Returns:
            dict: Informa√ß√µes extra√≠das
        """
        try:
            import re
            import requests
            
            # Extrair ID do Spotify da URL
            if 'track/' in url:
                track_id = re.search(r'track/([a-zA-Z0-9]+)', url)
                if track_id:
                    # Para tracks individuais, usar uma busca gen√©rica
                    return {
                        'type': 'track',
                        'id': track_id.group(1),
                        'name': 'M√∫sica do Spotify',
                        'artist': 'Artista'
                    }
            elif 'playlist/' in url:
                playlist_id = re.search(r'playlist/([a-zA-Z0-9]+)', url)
                if playlist_id:
                    # Para playlists, criar entradas gen√©ricas
                    return {
                        'type': 'playlist',
                        'id': playlist_id.group(1),
                        'name': 'Playlist do Spotify',
                        'tracks': []
                    }
            
            return {'type': 'unknown', 'name': 'Item do Spotify'}
            
        except Exception as e:
            return {'type': 'error', 'name': f'Erro: {str(e)}'}
    
    def buscar_musicas(self, url: str) -> list:
        """
        Busca informa√ß√µes das m√∫sicas de uma URL do Spotify.
        
        Args:
            url (str): URL do Spotify
            
        Returns:
            list: Lista com informa√ß√µes das m√∫sicas
        """
        try:
            if not self.disponivel:
                raise Exception("yt-dlp n√£o est√° dispon√≠vel")
            
            import yt_dlp
            
            # Extrair informa√ß√µes b√°sicas do Spotify
            spotify_info = self._extrair_info_spotify(url)
            
            musicas = []
            
            if spotify_info['type'] == 'track':
                # M√∫sica individual - criar busca gen√©rica
                nome_busca = f"m√∫sica spotify {spotify_info['id'][:8]}"
                musicas.append({
                    'id': 0,
                    'nome': f"M√∫sica do Spotify (ID: {spotify_info['id'][:8]}...)",
                    'url': url,
                    'search_term': nome_busca,
                    'selecionada': True,
                    'status': 'Aguardando'
                })
                
            elif spotify_info['type'] == 'playlist':
                # Playlist - criar v√°rias entradas gen√©ricas
                for i in range(5):  # Simular 5 m√∫sicas
                    musicas.append({
                        'id': i,
                        'nome': f"M√∫sica {i+1} da Playlist (ID: {spotify_info['id'][:8]}...)",
                        'url': url,
                        'search_term': f"m√∫sica playlist spotify {i+1}",
                        'selecionada': True,
                        'status': 'Aguardando'
                    })
            else:
                # Fallback - criar entrada gen√©rica
                musicas.append({
                    'id': 0,
                    'nome': "M√∫sica do Spotify (busca gen√©rica)",
                    'url': url,
                    'search_term': "m√∫sica popular spotify",
                    'selecionada': True,
                    'status': 'Aguardando'
                })
            
            return musicas
            
        except Exception as e:
            raise Exception(f"Erro ao processar URL do Spotify: {str(e)}")
    
    def baixar_musica(self, musica_info: dict, pasta_destino: str, callback_progresso=None) -> bool:
        """
        Baixa uma m√∫sica buscando no YouTube.
        
        Args:
            musica_info (dict): Informa√ß√µes da m√∫sica
            pasta_destino (str): Pasta de destino
            callback_progresso (callable): Callback de progresso
            
        Returns:
            bool: True se sucesso
        """
        try:
            if not self.disponivel:
                return False
                
            import yt_dlp
            
            # Usar termo de busca para encontrar no YouTube
            search_term = musica_info.get('search_term', 'm√∫sica popular')
            search_query = f"ytsearch1:{search_term}"
            
            # Configura√ß√£o para download de √°udio
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(pasta_destino, f"{musica_info['nome'][:50]}.%(ext)s"),
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '320',
                }],
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False
            }
            
            # Hook de progresso
            def progress_hook(d):
                if callback_progresso:
                    if d['status'] == 'downloading':
                        if 'total_bytes' in d and d['total_bytes']:
                            percent = int(d['downloaded_bytes'] / d['total_bytes'] * 100)
                            callback_progresso(percent)
                        elif '_percent_str' in d:
                            try:
                                percent_str = d['_percent_str'].replace('%', '').strip()
                                percent = int(float(percent_str))
                                callback_progresso(percent)
                            except:
                                callback_progresso(50)  # Fallback
                    elif d['status'] == 'finished':
                        callback_progresso(100)
            
            ydl_opts['progress_hooks'] = [progress_hook]
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # Buscar e baixar do YouTube
                ydl.download([search_query])
                
                if callback_progresso:
                    callback_progresso(100)
                
                return True
                
        except Exception as e:
            print(f"Erro no download: {e}")
            return False

class BaixaFyApp:
    """Aplicativo principal do BaixaFy - Vers√£o Port√°til Completa."""
    
    def __init__(self):
        """Inicializa a aplica√ß√£o."""
        self.root = ctk.CTk()
        self.downloader = SpotifyDownloader()
        self.musicas_lista = []
        self.pasta_destino = self._obter_pasta_musicas()
        self.baixando = False
        
        self._configurar_janela()
        self._criar_interface()
        self._verificar_sistema()
        
    def _obter_pasta_musicas(self) -> str:
        """Obt√©m pasta padr√£o de M√∫sica do Windows."""
        try:
            import winreg
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                              r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders") as key:
                return winreg.QueryValueEx(key, "My Music")[0]
        except:
            return str(Path.home() / "Music")
    
    def _configurar_janela(self):
        """Configura a janela principal."""
        self.root.title("üéµ BaixaFy - Baixador de M√∫sicas do Spotify")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # √çcone da janela
        try:
            self.root.iconbitmap("baixafy_icon.ico")
        except:
            pass
    
    def _criar_interface(self):
        """Cria interface moderna estilo Spotify."""
        
        # Header com gradiente visual
        header_frame = ctk.CTkFrame(self.root, height=120, fg_color=["#1DB954", "#1ed760"])
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # Logo e t√≠tulo
        title_container = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_container.pack(expand=True, fill="both")
        
        logo_title = ctk.CTkLabel(
            title_container, 
            text="üéµ BaixaFy", 
            font=ctk.CTkFont(size=32, weight="bold"),
            text_color="white"
        )
        logo_title.pack(pady=(25, 5))
        
        subtitle = ctk.CTkLabel(
            title_container,
            text="Baixe suas m√∫sicas favoritas do Spotify ‚Ä¢ Vers√£o Port√°til Completa",
            font=ctk.CTkFont(size=14),
            text_color="white"
        )
        subtitle.pack()
        
        # √Årea principal
        main_frame = ctk.CTkFrame(self.root, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Se√ß√£o de URL
        url_section = ctk.CTkFrame(main_frame)
        url_section.pack(fill="x", pady=(0, 20))
        
        url_label = ctk.CTkLabel(
            url_section, 
            text="üîó Cole o link da m√∫sica ou playlist do Spotify:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        url_label.pack(anchor="w", padx=20, pady=(20, 10))
        
        # Campo URL com estilo moderno
        self.url_entry = ctk.CTkEntry(
            url_section,
            placeholder_text="https://open.spotify.com/track/... ou playlist/...",
            height=45,
            font=ctk.CTkFont(size=13),
            corner_radius=10
        )
        self.url_entry.pack(fill="x", padx=20, pady=(0, 15))
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(url_section, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.btn_pesquisar = ctk.CTkButton(
            buttons_frame,
            text="üîç Pesquisar M√∫sicas",
            height=45,
            font=ctk.CTkFont(size=15, weight="bold"),
            fg_color="#1DB954",
            hover_color="#1ed760",
            corner_radius=25,
            command=self._pesquisar_musicas
        )
        self.btn_pesquisar.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.btn_limpar = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è Limpar",
            height=45,
            width=100,
            font=ctk.CTkFont(size=13),
            fg_color="#666666",
            hover_color="#777777",
            corner_radius=25,
            command=self._limpar_lista
        )
        self.btn_limpar.pack(side="right")
        
        # Se√ß√£o de pasta de destino
        pasta_section = ctk.CTkFrame(main_frame)
        pasta_section.pack(fill="x", pady=(0, 20))
        
        pasta_label = ctk.CTkLabel(
            pasta_section,
            text="üìÅ Pasta onde salvar as m√∫sicas:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        pasta_label.pack(anchor="w", padx=20, pady=(20, 10))
        
        pasta_frame = ctk.CTkFrame(pasta_section, fg_color="transparent")
        pasta_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.pasta_entry = ctk.CTkEntry(
            pasta_frame,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.pasta_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.pasta_entry.insert(0, self.pasta_destino)
        
        btn_pasta = ctk.CTkButton(
            pasta_frame,
            text="Escolher Pasta",
            width=130,
            height=40,
            font=ctk.CTkFont(size=12),
            command=self._selecionar_pasta
        )
        btn_pasta.pack(side="right")
        
        # Lista de m√∫sicas
        musicas_section = ctk.CTkFrame(main_frame)
        musicas_section.pack(fill="both", expand=True)
        
        musicas_header = ctk.CTkFrame(musicas_section, fg_color="transparent")
        musicas_header.pack(fill="x", padx=20, pady=(20, 10))
        
        self.musicas_label = ctk.CTkLabel(
            musicas_header, 
            text="üé∂ M√∫sicas encontradas (0):",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.musicas_label.pack(side="left")
        
        # Bot√µes de sele√ß√£o
        select_buttons = ctk.CTkFrame(musicas_header, fg_color="transparent")
        select_buttons.pack(side="right")
        
        self.btn_sel_todas = ctk.CTkButton(
            select_buttons,
            text="‚úÖ Todas",
            width=80,
            height=30,
            font=ctk.CTkFont(size=11),
            command=self._selecionar_todas
        )
        self.btn_sel_todas.pack(side="left", padx=(0, 5))
        
        self.btn_desel_todas = ctk.CTkButton(
            select_buttons,
            text="‚ùå Nenhuma",
            width=80,
            height=30,
            font=ctk.CTkFont(size=11),
            fg_color="#666666",
            hover_color="#777777",
            command=self._desselecionar_todas
        )
        self.btn_desel_todas.pack(side="left")
        
        # √Årea scroll√°vel para m√∫sicas
        self.scroll_frame = ctk.CTkScrollableFrame(musicas_section, height=200)
        self.scroll_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Bot√£o principal de download
        self.btn_download = ctk.CTkButton(
            main_frame,
            text="‚¨áÔ∏è Baixar M√∫sicas Selecionadas",
            height=55,
            font=ctk.CTkFont(size=18, weight="bold"),
            fg_color="#1DB954",
            hover_color="#1ed760",
            corner_radius=30,
            command=self._iniciar_download
        )
        self.btn_download.pack(fill="x", pady=(10, 0))
        
        # Status bar
        self.status_label = ctk.CTkLabel(
            self.root,
            text="‚úÖ BaixaFy pronto para usar!",
            font=ctk.CTkFont(size=12),
            text_color="#1DB954"
        )
        self.status_label.pack(pady=10)
        
    def _verificar_sistema(self):
        """Verifica se sistema est√° funcionando."""
        if self.downloader.disponivel:
            # Verificar tamb√©m se FFmpeg est√° dispon√≠vel
            ffmpeg_ok = self._verificar_ffmpeg()
            if ffmpeg_ok:
                self._atualizar_status("‚úÖ Sistema completo! yt-dlp + FFmpeg funcionando.")
            else:
                self._atualizar_status("‚ö†Ô∏è yt-dlp OK, mas FFmpeg n√£o encontrado")
                self._mostrar_aviso_ffmpeg()
        else:
            self._atualizar_status("‚ö†Ô∏è Execut√°vel port√°til - funcionalidade limitada")
            messagebox.showwarning(
                "Aviso",
                "Este execut√°vel est√° com funcionalidade limitada.\n\n"
                "Para funcionalidade completa, execute o c√≥digo Python\n"
                "com as depend√™ncias instaladas.\n\n"
                "Algumas funcionalidades podem n√£o funcionar."
            )
    
    def _verificar_ffmpeg(self) -> bool:
        """Verifica se FFmpeg est√° dispon√≠vel."""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _mostrar_aviso_ffmpeg(self):
        """Mostra aviso sobre FFmpeg se necess√°rio."""
        resposta = messagebox.askyesno(
            "FFmpeg n√£o encontrado",
            "O FFmpeg n√£o est√° instalado!\n\n"
            "FFmpeg √© necess√°rio para converter v√≠deos em MP3.\n"
            "Sem ele, os downloads podem falhar.\n\n"
            "Deseja ver instru√ß√µes de instala√ß√£o?",
            icon="warning"
        )
        
        if resposta:
            self._mostrar_instrucoes_ffmpeg()
    
    def _mostrar_instrucoes_ffmpeg(self):
        """Mostra janela com instru√ß√µes do FFmpeg."""
        janela = ctk.CTkToplevel(self.root)
        janela.title("Instru√ß√µes FFmpeg")
        janela.geometry("500x400")
        janela.resizable(False, False)
        
        # Centralizar janela
        janela.update_idletasks()
        x = (janela.winfo_screenwidth() // 2) - (500 // 2)
        y = (janela.winfo_screenheight() // 2) - (400 // 2)
        janela.geometry(f"500x400+{x}+{y}")
        
        # Conte√∫do
        frame = ctk.CTkFrame(janela)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        titulo = ctk.CTkLabel(
            frame,
            text="üìã Como Instalar FFmpeg",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        titulo.pack(pady=(20, 20))
        
        instrucoes = ctk.CTkTextbox(
            frame,
            height=250,
            font=ctk.CTkFont(size=11)
        )
        instrucoes.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        texto_instrucoes = """üîß INSTALA√á√ÉO DO FFMPEG:

OP√á√ÉO 1 - CHOCOLATEY (Mais F√°cil):
1. Abra PowerShell como Administrador
2. Instale Chocolatey (se n√£o tiver):
   Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
3. Instale FFmpeg:
   choco install ffmpeg
4. Reinicie o BaixaFy

OP√á√ÉO 2 - DOWNLOAD MANUAL:
1. V√° para: https://ffmpeg.org/download.html
2. Baixe a vers√£o Windows
3. Extraia para C:\\ffmpeg
4. Adicione C:\\ffmpeg\\bin ao PATH do sistema
5. Reinicie o computador

OP√á√ÉO 3 - WINGET (Windows 11):
1. Abra Terminal como Administrador
2. Digite: winget install ffmpeg
3. Reinicie o BaixaFy

‚ö†Ô∏è SEM FFMPEG:
‚Ä¢ yt-dlp baixa v√≠deos, mas n√£o converte para MP3
‚Ä¢ Downloads podem falhar ou ficar em formato de v√≠deo
‚Ä¢ Recomendamos instalar para melhor experi√™ncia

‚úÖ AP√ìS INSTALAR:
‚Ä¢ Reinicie o BaixaFy
‚Ä¢ Status deve mostrar "FFmpeg funcionando"
‚Ä¢ Downloads de MP3 funcionar√£o perfeitamente"""
        
        instrucoes.insert("0.0", texto_instrucoes)
        instrucoes.configure(state="disabled")
        
        btn_fechar = ctk.CTkButton(
            frame,
            text="Fechar",
            command=janela.destroy
        )
        btn_fechar.pack(pady=(0, 20))
    
    def _pesquisar_musicas(self):
        """Pesquisa m√∫sicas da URL fornecida."""
        url = self.url_entry.get().strip()
        
        if not url:
            messagebox.showwarning("URL vazia", "Por favor, cole um link do Spotify!")
            return
        
        if not self._validar_url_spotify(url):
            messagebox.showerror("URL inv√°lida", 
                               "Use apenas links do Spotify!\n\n"
                               "Exemplo: https://open.spotify.com/track/...")
            return
        
        self._atualizar_status("üîç Buscando m√∫sicas... aguarde...")
        self.btn_pesquisar.configure(state="disabled", text="üîç Buscando...")
        
        # Executar busca em thread separada
        thread = threading.Thread(target=self._buscar_musicas_thread, args=(url,))
        thread.daemon = True
        thread.start()
    
    def _validar_url_spotify(self, url: str) -> bool:
        """Valida se URL √© do Spotify."""
        padroes = [
            r'https://open\.spotify\.com/(track|playlist|album)/',
            r'https://spotify\.link/',
            r'spotify:(track|playlist|album):'
        ]
        return any(re.match(padrao, url) for padrao in padroes)
    
    def _buscar_musicas_thread(self, url: str):
        """Thread para buscar m√∫sicas."""
        try:
            musicas = self.downloader.buscar_musicas(url)
            self.root.after(0, self._mostrar_musicas, musicas)
        except Exception as e:
            self.root.after(0, self._erro_busca, str(e))
    
    def _mostrar_musicas(self, musicas: list):
        """Mostra lista de m√∫sicas na interface."""
        self.musicas_lista = musicas
        
        # Limpar lista anterior
        for widget in self.scroll_frame.winfo_children():
            widget.destroy()
        
        # Atualizar contador
        self.musicas_label.configure(text=f"üé∂ M√∫sicas encontradas ({len(musicas)}):")
        
        # Adicionar cada m√∫sica
        for musica in musicas:
            self._criar_item_musica(musica)
        
        self._atualizar_status(f"‚úÖ {len(musicas)} m√∫sica(s) encontrada(s)!")
        self.btn_pesquisar.configure(state="normal", text="üîç Pesquisar M√∫sicas")
    
    def _criar_item_musica(self, musica: dict):
        """Cria item visual para uma m√∫sica."""
        item_frame = ctk.CTkFrame(self.scroll_frame)
        item_frame.pack(fill="x", pady=5, padx=5)
        
        # Checkbox e nome
        checkbox_var = tk.BooleanVar(value=musica['selecionada'])
        
        content_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
        content_frame.pack(fill="x", padx=15, pady=10)
        
        checkbox = ctk.CTkCheckBox(
            content_frame,
            text=musica['nome'][:80] + ("..." if len(musica['nome']) > 80 else ""),
            variable=checkbox_var,
            font=ctk.CTkFont(size=13)
        )
        checkbox.pack(side="left", fill="x", expand=True)
        
        # Status
        status_label = ctk.CTkLabel(
            content_frame,
            text=musica['status'],
            font=ctk.CTkFont(size=11),
            width=100
        )
        status_label.pack(side="right", padx=(10, 0))
        
        # Armazenar refer√™ncias
        musica['checkbox_var'] = checkbox_var
        musica['status_label'] = status_label
    
    def _erro_busca(self, erro: str):
        """Handle erro na busca."""
        messagebox.showerror("Erro na busca", f"Erro ao buscar m√∫sicas:\n\n{erro}")
        self._atualizar_status("‚ùå Erro na busca. Verifique o link e tente novamente.")
        self.btn_pesquisar.configure(state="normal", text="üîç Pesquisar M√∫sicas")
    
    def _selecionar_pasta(self):
        """Seleciona pasta de destino."""
        pasta = filedialog.askdirectory(
            title="Escolha onde salvar as m√∫sicas",
            initialdir=self.pasta_destino
        )
        if pasta:
            self.pasta_destino = pasta
            self.pasta_entry.delete(0, tk.END)
            self.pasta_entry.insert(0, pasta)
    
    def _selecionar_todas(self):
        """Seleciona todas as m√∫sicas."""
        for musica in self.musicas_lista:
            if 'checkbox_var' in musica:
                musica['checkbox_var'].set(True)
    
    def _desselecionar_todas(self):
        """Desseleciona todas as m√∫sicas."""
        for musica in self.musicas_lista:
            if 'checkbox_var' in musica:
                musica['checkbox_var'].set(False)
    
    def _limpar_lista(self):
        """Limpa a lista de m√∫sicas."""
        self.musicas_lista = []
        for widget in self.scroll_frame.winfo_children():
            widget.destroy()
        self.musicas_label.configure(text="üé∂ M√∫sicas encontradas (0):")
        self.url_entry.delete(0, tk.END)
        self._atualizar_status("‚úÖ Lista limpa. Cole um novo link para pesquisar.")
    
    def _iniciar_download(self):
        """Inicia download das m√∫sicas selecionadas."""
        if not self.musicas_lista:
            messagebox.showwarning("Nenhuma m√∫sica", "Primeiro pesquise por m√∫sicas!")
            return
        
        if self.baixando:
            messagebox.showinfo("Download em andamento", "Aguarde o download atual terminar!")
            return
        
        # Verificar sele√ß√£o
        selecionadas = [m for m in self.musicas_lista 
                       if 'checkbox_var' in m and m['checkbox_var'].get()]
        
        if not selecionadas:
            messagebox.showwarning("Nenhuma selecionada", "Selecione pelo menos uma m√∫sica!")
            return
        
        # Verificar pasta
        pasta = self.pasta_entry.get().strip()
        if not pasta:
            messagebox.showwarning("Pasta inv√°lida", "Escolha uma pasta v√°lida!")
            return
        
        # Criar pasta se necess√°rio
        try:
            Path(pasta).mkdir(parents=True, exist_ok=True)
        except Exception as e:
            messagebox.showerror("Erro na pasta", f"Erro ao criar pasta:\n{e}")
            return
        
        # Iniciar download
        self.baixando = True
        self.btn_download.configure(state="disabled", text="‚è≥ Baixando...")
        
        thread = threading.Thread(target=self._download_thread, args=(selecionadas, pasta))
        thread.daemon = True
        thread.start()
    
    def _download_thread(self, musicas: list, pasta: str):
        """Thread para download das m√∫sicas."""
        sucessos = 0
        total = len(musicas)
        
        for i, musica in enumerate(musicas):
            try:
                # Atualizar status
                self.root.after(0, self._atualizar_status_musica, musica, "‚è≥ Buscando no YouTube...")
                
                # Callback de progresso
                def callback_progresso(percent):
                    self.root.after(0, self._atualizar_status_musica, musica, f"‚è≥ Baixando {percent}%...")
                
                # Download passando info da m√∫sica ao inv√©s de s√≥ URL
                sucesso = self.downloader.baixar_musica(musica, pasta, callback_progresso)
                
                if sucesso:
                    sucessos += 1
                    self.root.after(0, self._atualizar_status_musica, musica, "‚úÖ Conclu√≠do")
                else:
                    self.root.after(0, self._atualizar_status_musica, musica, "‚ùå Erro")
                    
            except Exception as e:
                self.root.after(0, self._atualizar_status_musica, musica, f"‚ùå Erro")
                print(f"Erro no download: {e}")
        
        # Finalizar
        self.root.after(0, self._finalizar_download, total, sucessos, pasta)
    
    def _atualizar_status_musica(self, musica: dict, status: str):
        """Atualiza status de uma m√∫sica."""
        if 'status_label' in musica:
            musica['status_label'].configure(text=status)
            
            # Cor do status
            if "‚úÖ" in status:
                musica['status_label'].configure(text_color="#1DB954")
            elif "‚ùå" in status:
                musica['status_label'].configure(text_color="#ff4444")
            elif "‚è≥" in status:
                musica['status_label'].configure(text_color="#ffaa00")
    
    def _finalizar_download(self, total: int, sucessos: int, pasta: str):
        """Finaliza processo de download."""
        self.baixando = False
        self.btn_download.configure(state="normal", text="‚¨áÔ∏è Baixar M√∫sicas Selecionadas")
        
        if sucessos == total:
            self._atualizar_status(f"üéâ Download conclu√≠do! {sucessos} m√∫sica(s) baixada(s).")
            messagebox.showinfo(
                "Download Conclu√≠do!",
                f"üéâ Sucesso! {sucessos} de {total} m√∫sica(s) baixada(s)!\n\n"
                f"üìÅ Pasta: {pasta}\n\n"
                f"üéµ Suas m√∫sicas est√£o prontas para ouvir!"
            )
        elif sucessos > 0:
            self._atualizar_status(f"‚ö†Ô∏è Download parcial: {sucessos}/{total} m√∫sica(s).")
            messagebox.showwarning(
                "Download Parcial",
                f"‚ö†Ô∏è {sucessos} de {total} m√∫sica(s) foram baixadas.\n\n"
                f"Algumas m√∫sicas falharam (podem n√£o estar dispon√≠veis).\n\n"
                f"üìÅ Pasta: {pasta}"
            )
        else:
            self._atualizar_status("‚ùå Falha no download.")
            messagebox.showerror(
                "Falha no Download",
                "‚ùå Nenhuma m√∫sica foi baixada.\n\n"
                "Poss√≠veis causas:\n"
                "‚Ä¢ Problemas de conex√£o com internet\n"
                "‚Ä¢ M√∫sicas n√£o dispon√≠veis\n"
                "‚Ä¢ Funcionalidade limitada nesta vers√£o\n\n"
                "Tente com URLs diferentes ou use a vers√£o completa."
            )
    
    def _atualizar_status(self, mensagem: str):
        """Atualiza barra de status."""
        self.status_label.configure(text=mensagem)
        
        # Cor do status
        if "‚úÖ" in mensagem or "üéâ" in mensagem:
            self.status_label.configure(text_color="#1DB954")
        elif "‚ùå" in mensagem:
            self.status_label.configure(text_color="#ff4444")
        elif "‚ö†Ô∏è" in mensagem:
            self.status_label.configure(text_color="#ffaa00")
        elif "üîç" in mensagem or "‚è≥" in mensagem:
            self.status_label.configure(text_color="#1DB954")
    
    def executar(self):
        """Executa o aplicativo."""
        self.root.mainloop()

def main():
    """Fun√ß√£o principal."""
    try:
        app = BaixaFyApp()
        app.executar()
    except Exception as e:
        messagebox.showerror("Erro Fatal", f"Erro ao iniciar BaixaFy:\n{e}")
        sys.exit(1)

if __name__ == "__main__":
    main()