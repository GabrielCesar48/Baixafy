# apps/baixador/services.py
import os
import re
import json
import subprocess
import tempfile
from typing import Dict, List, Optional, Tuple
from urllib.parse import urlparse
from pathlib import Path
import time

from spotdl import Spotdl
from spotdl.utils.config import get_config
from django.conf import settings
from apps.users.models import CustomUser, DownloadHistory


class SpotifyDownloadService:
    """
    Servi√ßo respons√°vel por gerenciar downloads de m√∫sicas do Spotify.
    Utiliza a biblioteca spotDL para baixar √°udios via YouTube.
    """
    
    def __init__(self):
        """
        Inicializa o servi√ßo de download configurando o spotDL.
        """
        self.download_path = Path(settings.MEDIA_ROOT)
        self.download_path.mkdir(exist_ok=True)
        
        # Configurar e inicializar spotDL
        self._setup_spotdl()
    
    def _setup_spotdl(self):
        """
        Configura o spotDL criando arquivo de config se necess√°rio.
        """
        try:
            # Tentar criar arquivo de configura√ß√£o se n√£o existir
            self._ensure_config_exists()
            
            # CORRE√á√ÉO: SpotDL precisa de credenciais obrigat√≥rias
            client_id = os.getenv('SPOTIFY_CLIENT_ID')
            client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
            
            # Se n√£o tiver credenciais, usar valores padr√£o vazios
            if not client_id or not client_secret:
                print("‚ö†Ô∏è Credenciais do Spotify n√£o configuradas. Usando valores padr√£o.")
                client_id = ""
                client_secret = ""
            
            try:
                self.spotdl = Spotdl(client_id=client_id, client_secret=client_secret)
                print("‚úÖ SpotDL inicializado")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao inicializar: {e}")
                # Tentar com credenciais vazias explicitamente
                self.spotdl = Spotdl(client_id="", client_secret="")
                print("‚úÖ SpotDL inicializado com credenciais vazias")
                
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico: {e}")
            raise Exception(f"Falha na inicializa√ß√£o do SpotDL: {str(e)}")
    
    def _ensure_config_exists(self):
        """
        Garante que o arquivo de configura√ß√£o do spotDL existe.
        """
        try:
            config = get_config()
            print("‚úÖ Configura√ß√£o do SpotDL encontrada")
        except Exception:
            print("‚ö†Ô∏è Criando configura√ß√£o...")
            try:
                subprocess.run(['spotdl', '--generate-config'], capture_output=True, timeout=30)
                print("‚úÖ Configura√ß√£o criada")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao criar config: {e}")
    
    def extract_spotify_info(self, url: str) -> Dict:
        """
        Extrai informa√ß√µes b√°sicas de uma URL do Spotify.
        """
        try:
            url = url.strip()
            
            if 'track/' in url:
                match = re.search(r'track/([a-zA-Z0-9]+)', url)
                return {'type': 'track', 'id': match.group(1), 'url': url, 'success': True} if match else {'error': 'URL inv√°lida'}
            elif 'playlist/' in url:
                match = re.search(r'playlist/([a-zA-Z0-9]+)', url)
                return {'type': 'playlist', 'id': match.group(1), 'url': url, 'success': True} if match else {'error': 'URL inv√°lida'}
            elif 'album/' in url:
                match = re.search(r'album/([a-zA-Z0-9]+)', url)
                return {'type': 'album', 'id': match.group(1), 'url': url, 'success': True} if match else {'error': 'URL inv√°lida'}
            else:
                return {'error': 'Tipo n√£o suportado. Use links de m√∫sica, playlist ou √°lbum.'}
        except Exception as e:
            return {'error': f'Erro ao processar URL: {str(e)}'}
    
    def get_track_metadata(self, url: str) -> Dict:
        """
        Obt√©m metadados de uma m√∫sica do Spotify.
        """
        try:
            if not hasattr(self, 'spotdl'):
                return {'error': 'Servi√ßo n√£o configurado'}
            
            songs = self.spotdl.search([url])
            if not songs:
                return {'error': 'M√∫sica n√£o encontrada'}
            
            song = songs[0]
            return {
                'success': True,
                'name': song.name,
                'artists': song.artists,
                'album': song.album_name,
                'duration': f"{song.duration // 60}:{song.duration % 60:02d}",
                'cover_url': song.cover_url or '',
                'spotify_url': url,
                'year': getattr(song, 'year', 'N/A')
            }
        except Exception as e:
            error_msg = str(e)
            if 'Config file not found' in error_msg:
                return {'error': 'Execute: spotdl --generate-config'}
            elif 'FFmpeg' in error_msg:
                return {'error': 'FFmpeg n√£o instalado'}
            else:
                return {'error': f'Erro: {error_msg}'}
    
    def get_playlist_info(self, url: str) -> Dict:
        """
        NOVO: Obt√©m informa√ß√µes de uma playlist do Spotify.
        """
        try:
            if not hasattr(self, 'spotdl'):
                return {'error': 'Servi√ßo n√£o configurado'}
            
            songs = self.spotdl.search([url])
            if not songs:
                return {'error': 'Playlist n√£o encontrada'}
            
            tracks = []
            for i, song in enumerate(songs):
                tracks.append({
                    'index': i + 1,
                    'name': song.name,
                    'artists': song.artists,
                    'album': song.album_name,
                    'duration': f"{song.duration // 60}:{song.duration % 60:02d}",
                    'cover_url': song.cover_url or '',
                    'year': getattr(song, 'year', 'N/A')
                })
            
            return {
                'success': True,
                'name': f"Playlist com {len(tracks)} m√∫sicas",
                'total_tracks': len(tracks),
                'tracks': tracks,
                'owner': 'Usu√°rio do Spotify',
                'spotify_url': url
            }
        except Exception as e:
            error_msg = str(e)
            if 'Config file not found' in error_msg:
                return {'error': 'Execute: spotdl --generate-config'}
            elif 'FFmpeg' in error_msg:
                return {'error': 'FFmpeg n√£o instalado'}
            else:
                return {'error': f'Erro: {error_msg}'}
    
    def can_user_download(self, user: CustomUser) -> Tuple[bool, str]:
        """
        Verifica se o usu√°rio pode fazer download.
        """
        if user.is_premium_active():
            return True, "Premium ativo"
        
        free_downloads = DownloadHistory.objects.filter(user=user, is_premium_download=False).count()
        if free_downloads >= 1:
            return False, "Limite gratuito atingido. Assine Premium!"
        
        return True, "Download gratuito dispon√≠vel"
    
    def download_track(self, url: str, user: CustomUser) -> Dict:
        """
        Realiza o download de uma m√∫sica do Spotify.
        """
        try:
            can_download, message = self.can_user_download(user)
            if not can_download:
                return {'error': message}
            
            if not hasattr(self, 'spotdl'):
                return {'error': 'Servi√ßo n√£o configurado'}
            
            # Obter metadados
            metadata = self.get_track_metadata(url)
            if 'error' in metadata:
                return metadata
            
            print(f"üéµ Baixando: {metadata.get('name', 'N/A')}")
            
            # Download
            songs = self.spotdl.search([url])
            if not songs:
                return {'error': 'M√∫sica n√£o encontrada'}
            
            self.spotdl.download(songs)
            
            # Procurar arquivo baixado
            downloaded_files = []
            current_time = time.time()
            
            for item in self.download_path.iterdir():
                if item.is_file() and item.suffix.lower() == '.mp3':
                    if (current_time - item.stat().st_mtime) < 300:  # 5 minutos
                        downloaded_files.append(item)
            
            if not downloaded_files:
                return {'error': 'Arquivo n√£o encontrado ap√≥s download'}
            
            downloaded_file = max(downloaded_files, key=lambda x: x.stat().st_mtime)
            
            # Registrar no hist√≥rico
            is_premium = user.is_premium_active()
            DownloadHistory.objects.create(
                user=user,
                spotify_url=url,
                song_name=metadata.get('name', 'Desconhecido'),
                artist_name=', '.join(metadata.get('artists', ['Desconhecido'])),
                file_path=str(downloaded_file),
                is_premium_download=is_premium
            )
            
            print(f"‚úÖ Download conclu√≠do: {downloaded_file.name}")
            
            return {
                'success': True,
                'file_path': str(downloaded_file),
                'file_name': downloaded_file.name,
                'download_url': f"{settings.MEDIA_URL}{downloaded_file.name}",
                'metadata': metadata,
                'is_premium_download': is_premium
            }
            
        except Exception as e:
            error_msg = str(e)
            if 'ffmpeg' in error_msg.lower():
                return {'error': 'FFmpeg n√£o instalado'}
            else:
                return {'error': f'Erro no download: {error_msg}'}
    
    def health_check(self) -> Dict:
        """
        Verifica se o servi√ßo est√° funcionando.
        """
        try:
            if not hasattr(self, 'spotdl'):
                return {'status': 'error', 'message': 'SpotDL n√£o inicializado'}
            
            if not self.download_path.exists():
                return {'status': 'error', 'message': 'Diret√≥rio n√£o existe'}
            
            # Verificar FFmpeg
            try:
                subprocess.run(['ffmpeg', '-version'], capture_output=True, timeout=5)
                ffmpeg_ok = True
            except:
                ffmpeg_ok = False
            
            return {
                'status': 'ok' if ffmpeg_ok else 'error',
                'message': 'Funcionando' if ffmpeg_ok else 'FFmpeg n√£o instalado',
                'download_path': str(self.download_path),
                'ffmpeg_available': ffmpeg_ok
            }
        except Exception as e:
            return {'status': 'error', 'message': f'Erro: {str(e)}'}


# Inst√¢ncia global
spotify_service = None

def get_spotify_service():
    """Retorna a inst√¢ncia do servi√ßo."""
    global spotify_service
    if spotify_service is None:
        try:
            spotify_service = SpotifyDownloadService()
            print("‚úÖ SpotifyDownloadService inicializado")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar: {e}")
            return None
    return spotify_service

# Tentar inicializar
try:
    spotify_service = SpotifyDownloadService()
    print("‚úÖ SpotifyDownloadService inicializado")
except Exception as e:
    print(f"‚ùå Erro ao inicializar: {e}")
    spotify_service = None