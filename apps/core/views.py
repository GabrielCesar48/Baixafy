# apps/core/views.py
import json
import os
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, FileResponse, Http404
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from django.contrib.auth import get_user_model
from django.conf import settings

from apps.users.forms import DownloadForm
from apps.baixador.services import SpotifyDownloadService, spotify_service
from apps.users.models import DownloadHistory

User = get_user_model()


def home(request):
    """
    P√°gina inicial do BaixaFy.
    Mostra informa√ß√µes gerais e convida para cadastro/login.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        HttpResponse: P√°gina inicial renderizada
    """
    return render(request, 'home.html')


@login_required
def painel(request):
    """
    Painel principal do usu√°rio logado.
    Mostra status da conta, formul√°rio de download e hist√≥rico.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        HttpResponse: Painel do usu√°rio renderizado
    """
    user = request.user
    
    # Verificar se servi√ßo est√° funcionando
    service_status = None
    if spotify_service:
        service_status = spotify_service.health_check()
    
    # Informa√ß√µes do usu√°rio para o template
    context = {
        'user': user,
        'is_premium': user.is_premium_active(),
        'days_remaining': user.days_remaining(),
        'can_download': user.can_download(),
        'free_downloads_used': user.free_downloads_used,
        'total_downloads': user.total_downloads,
        'download_form': DownloadForm(),
        'recent_downloads': DownloadHistory.objects.filter(
            user=user, success=True
        ).order_by('-download_date')[:5],
        'service_status': service_status  # Para mostrar status do spotDL
    }
    
    # Adicionar aviso se servi√ßo n√£o estiver funcionando
    if not spotify_service or service_status.get('status') != 'ok':
        messages.warning(
            request,
            '‚ö†Ô∏è Servi√ßo de download temporariamente indispon√≠vel. '
            'Nossos t√©cnicos est√£o trabalhando para resolver.'
        )
    
    return render(request, 'painel.html', context)


@login_required
def pagamento(request):
    """
    P√°gina de simula√ß√£o de pagamento.
    Permite ao usu√°rio "ativar" sua assinatura premium.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        HttpResponse: P√°gina de pagamento ou redirect ap√≥s ativa√ß√£o
    """
    if request.method == 'POST':
        # Simular pagamento bem-sucedido
        request.user.activate_premium(days=30)
        
        messages.success(
            request, 
            f"üéâ Parab√©ns, {request.user.first_name}! "
            "Sua assinatura premium foi ativada com sucesso! "
            "Agora voc√™ pode baixar m√∫sicas ilimitadas por 30 dias."
        )
        
        return redirect('painel')
    
    return render(request, 'pagamento.html')


@login_required
@csrf_exempt
def get_spotify_info(request):
    """
    Endpoint AJAX para obter informa√ß√µes de uma URL do Spotify.
    Retorna metadados da m√∫sica ou playlist em formato JSON.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        JsonResponse: Metadados da m√∫sica/playlist ou erro
    """
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    spotify_url = request.POST.get('spotify_url', '').strip()
    
    if not spotify_url:
        return JsonResponse({
            'success': False,
            'message': 'URL do Spotify √© obrigat√≥ria'
        })
    
    # Verificar se servi√ßo est√° dispon√≠vel
    if not spotify_service:
        return JsonResponse({
            'success': False,
            'message': 'Servi√ßo de download n√£o est√° dispon√≠vel. Tente novamente mais tarde.',
            'error_type': 'service_unavailable'
        })
    
    try:
        # Verificar se URL √© v√°lida
        url_info = spotify_service.extract_spotify_info(spotify_url)
        if 'error' in url_info:
            return JsonResponse({
                'success': False,
                'message': url_info['error']
            })
        
        # Obter metadados
        if url_info['type'] == 'track':
            metadata = spotify_service.get_track_metadata(spotify_url)
        else:
            # Para playlists e √°lbuns, usar m√©todo espec√≠fico futuramente
            return JsonResponse({
                'success': False,
                'message': 'No momento, apenas m√∫sicas individuais s√£o suportadas'
            })
        
        if 'error' in metadata:
            # Tratar erros espec√≠ficos do spotDL
            error_msg = metadata['error']
            
            if 'Config file not found' in error_msg:
                return JsonResponse({
                    'success': False,
                    'message': 'üîß Sistema em configura√ß√£o. Tente novamente em alguns minutos.',
                    'error_type': 'config_error',
                    'technical_message': 'spotDL config file missing'
                })
            elif 'No results found' in error_msg:
                return JsonResponse({
                    'success': False,
                    'message': 'üéµ M√∫sica n√£o encontrada ou n√£o dispon√≠vel para download'
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': f'Erro ao buscar m√∫sica: {error_msg}'
                })
        
        return JsonResponse({
            'success': True,
            'track_info': {
                'name': metadata['name'],
                'artists': metadata['artists'],
                'album': metadata['album'],
                'duration': metadata['duration'],
                'cover_url': metadata['cover_url'],
                'year': metadata.get('year', 'N/A')
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro em get_spotify_info: {str(e)}")
        return JsonResponse({
            'success': False,
            'message': 'Erro interno do servidor. Tente novamente.',
            'error_type': 'internal_error'
        })


@login_required
@csrf_exempt
def download_music(request):
    """
    Endpoint AJAX para baixar m√∫sica do Spotify.
    Processa download e retorna link para o arquivo.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        JsonResponse: Resultado do download ou erro
    """
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    spotify_url = request.POST.get('spotify_url', '').strip()
    user = request.user
    
    if not spotify_url:
        return JsonResponse({
            'success': False,
            'message': 'URL do Spotify √© obrigat√≥ria'
        })
    
    # Verificar se servi√ßo est√° dispon√≠vel
    if not spotify_service:
        return JsonResponse({
            'success': False,
            'message': 'Servi√ßo de download temporariamente indispon√≠vel',
            'error_type': 'service_unavailable'
        })
    
    # Verificar se usu√°rio pode baixar
    if not user.can_download():
        return JsonResponse({
            'success': False,
            'message': '‚õî Limite de downloads atingido! Assine o Premium para downloads ilimitados.',
            'needs_subscription': True
        })
    
    try:
        # Realizar download
        result = spotify_service.download_track(spotify_url, user)
        
        if 'error' in result:
            error_msg = result['error']
            
            # Tratar erros espec√≠ficos
            if 'Config file not found' in error_msg:
                return JsonResponse({
                    'success': False,
                    'message': 'üîß Sistema em manuten√ß√£o. Nossa equipe est√° configurando o servidor. Tente novamente em alguns minutos.',
                    'error_type': 'config_error'
                })
            elif 'ffmpeg' in error_msg.lower():
                return JsonResponse({
                    'success': False,
                    'message': 'üéµ Erro na convers√£o do √°udio. Tente novamente.',
                    'error_type': 'conversion_error'
                })
            elif 'youtube' in error_msg.lower():
                return JsonResponse({
                    'success': False,
                    'message': 'üì∫ Erro ao acessar fonte de √°udio. Tente novamente mais tarde.',
                    'error_type': 'source_error'
                })
            elif result.get('needs_subscription'):
                return JsonResponse({
                    'success': False,
                    'message': error_msg,
                    'needs_subscription': True
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': f'Erro no download: {error_msg}'
                })
        
        # Download bem-sucedido
        return JsonResponse({
            'success': True,
            'message': 'üéµ Download conclu√≠do com sucesso!',
            'filename': result['filename'],
            'download_url': f"/download-file/?file={result['filename']}",
            'metadata': result['metadata']
        })
        
    except Exception as e:
        print(f"‚ùå Erro em download_music: {str(e)}")
        return JsonResponse({
            'success': False,
            'message': 'Erro interno. Tente novamente mais tarde.',
            'error_type': 'internal_error'
        })


@login_required
def download_file(request):
    """
    Serve arquivos de download para o usu√°rio.
    Verifica se o arquivo pertence ao usu√°rio antes de servir.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        FileResponse: Arquivo para download ou erro 404
    """
    filename = request.GET.get('file')
    
    if not filename:
        raise Http404("Arquivo n√£o especificado")
    
    # Verificar se download pertence ao usu√°rio
    download = DownloadHistory.objects.filter(
        user=request.user,
        file_path__endswith=filename,
        success=True
    ).first()
    
    if not download:
        raise Http404("Arquivo n√£o encontrado ou sem permiss√£o")
    
    file_path = os.path.join(settings.MEDIA_ROOT, filename)
    
    if not os.path.exists(file_path):
        raise Http404("Arquivo n√£o existe no servidor")
    
    try:
        response = FileResponse(
            open(file_path, 'rb'),
            as_attachment=True,
            filename=filename
        )
        response['Content-Type'] = 'audio/mpeg'
        return response
        
    except Exception as e:
        print(f"‚ùå Erro ao servir arquivo: {str(e)}")
        raise Http404("Erro ao acessar arquivo")


@login_required
def historico(request):
    """
    P√°gina com hist√≥rico completo de downloads do usu√°rio.
    
    Args:
        request: Objeto de requisi√ß√£o HTTP
        
    Returns:
        HttpResponse: P√°gina de hist√≥rico renderizada
    """
    user = request.user
    
    # Todos os downloads do usu√°rio
    downloads = DownloadHistory.objects.filter(
        user=user
    ).order_by('-download_date')
    
    # Estat√≠sticas
    total_downloads = downloads.filter(success=True).count()
    failed_downloads = downloads.filter(success=False).count()
    
    context = {
        'downloads': downloads,
        'total_downloads': total_downloads,
        'failed_downloads': failed_downloads,
        'user': user
    }
    
    return render(request, 'historico.html', context)


# View para debug (remover em produ√ß√£o)
@login_required
def debug_spotdl(request):
    """
    View de debug para verificar status do spotDL.
    REMOVER EM PRODU√á√ÉO!
    """
    if not settings.DEBUG:
        raise Http404("N√£o dispon√≠vel em produ√ß√£o")
    
    status = {}
    
    if spotify_service:
        status = spotify_service.health_check()
        status['service_initialized'] = True
    else:
        status = {
            'service_initialized': False,
            'status': 'error',
            'message': 'SpotifyDownloadService n√£o inicializado'
        }
    
    return JsonResponse(status, json_dumps_params={'indent': 2})