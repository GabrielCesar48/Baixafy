#!/usr/bin/env python3
"""
BaixaFy Interface - Baseada no baixar.py original
Interface gr√°fica completa com CustomTkinter para baixar m√∫sicas do Spotify.
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import os
import sys
import subprocess
from pathlib import Path
import time

# Configura√ß√£o do tema
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

class BaixaFyInterface:
    """Interface principal do BaixaFy baseada no baixar.py original."""
    
    def __init__(self):
        """Inicializa interface."""
        self.root = ctk.CTk()
        self.pasta_destino = self._obter_pasta_musicas()
        self.baixando = False
        self.processo_atual = None
        
        self._configurar_janela()
        self._criar_interface()
        self._verificar_spotdl()
    
    def _obter_pasta_musicas(self) -> str:
        """Obt√©m pasta padr√£o de m√∫sica."""
        try:
            # Tentar pasta padr√£o do Windows
            import winreg
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                              r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders") as key:
                return winreg.QueryValueEx(key, "My Music")[0]
        except:
            # Fallback para pasta Music do usu√°rio
            music_folder = Path.home() / "Music" / "BaixaFy"
            music_folder.mkdir(parents=True, exist_ok=True)
            return str(music_folder)
    
    def _configurar_janela(self):
        """Configura janela principal."""
        self.root.title("üéµ BaixaFy - Baixador de M√∫sicas do Spotify")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # Centralizar janela
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (900 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"900x700+{x}+{y}")
    
    def _criar_interface(self):
        """Cria interface completa estilo Spotify."""
        
        # Header com gradiente
        header_frame = ctk.CTkFrame(self.root, height=120, fg_color=["#1DB954", "#1ed760"])
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # T√≠tulo e logo
        title_container = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_container.pack(expand=True, fill="both")
        
        logo_title = ctk.CTkLabel(
            title_container,
            text="üéµ BaixaFy",
            font=ctk.CTkFont(size=32, weight="bold"),
            text_color="white"
        )
        logo_title.pack(pady=(25, 5))
        
        subtitle = ctk.CTkLabel(
            title_container,
            text="Baixador de M√∫sicas e Playlists do Spotify ‚Ä¢ Vers√£o Port√°til",
            font=ctk.CTkFont(size=14),
            text_color="white"
        )
        subtitle.pack()
        
        # √Årea principal
        main_frame = ctk.CTkFrame(self.root, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Se√ß√£o URL
        url_section = ctk.CTkFrame(main_frame)
        url_section.pack(fill="x", pady=(0, 20))
        
        url_label = ctk.CTkLabel(
            url_section,
            text="üîó Cole o link da m√∫sica ou playlist do Spotify:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        url_label.pack(anchor="w", padx=20, pady=(20, 10))
        
        # Campo URL
        self.url_entry = ctk.CTkEntry(
            url_section,
            placeholder_text="https://open.spotify.com/track/... ou /playlist/...",
            height=45,
            font=ctk.CTkFont(size=13),
            corner_radius=10
        )
        self.url_entry.pack(fill="x", padx=20, pady=(0, 15))
        
        # Se√ß√£o pasta
        pasta_section = ctk.CTkFrame(main_frame)
        pasta_section.pack(fill="x", pady=(0, 20))
        
        pasta_label = ctk.CTkLabel(
            pasta_section,
            text="üìÅ Pasta onde salvar as m√∫sicas:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        pasta_label.pack(anchor="w", padx=20, pady=(20, 10))
        
        pasta_frame = ctk.CTkFrame(pasta_section, fg_color="transparent")
        pasta_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.pasta_entry = ctk.CTkEntry(
            pasta_frame,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.pasta_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.pasta_entry.insert(0, self.pasta_destino)
        
        btn_pasta = ctk.CTkButton(
            pasta_frame,
            text="Escolher Pasta",
            width=130,
            height=40,
            font=ctk.CTkFont(size=12),
            command=self._selecionar_pasta
        )
        btn_pasta.pack(side="right")
        
        # √Årea de log/progresso
        log_section = ctk.CTkFrame(main_frame)
        log_section.pack(fill="both", expand=True, pady=(0, 20))
        
        log_label = ctk.CTkLabel(
            log_section,
            text="üìã Log de atividades:",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        log_label.pack(anchor="w", padx=20, pady=(20, 10))
        
        # TextBox para log
        self.log_textbox = ctk.CTkTextbox(
            log_section,
            height=200,
            font=ctk.CTkFont(size=11)
        )
        self.log_textbox.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(0, 10))
        
        self.btn_download = ctk.CTkButton(
            buttons_frame,
            text="‚¨áÔ∏è Baixar",
            height=55,
            font=ctk.CTkFont(size=18, weight="bold"),
            fg_color="#1DB954",
            hover_color="#1ed760",
            corner_radius=30,
            command=self._iniciar_download
        )
        self.btn_download.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.btn_parar = ctk.CTkButton(
            buttons_frame,
            text="‚èπÔ∏è Parar",
            height=55,
            width=120,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#dc3545",
            hover_color="#c82333",
            corner_radius=30,
            command=self._parar_download,
            state="disabled"
        )
        self.btn_parar.pack(side="right")
        
        # Status bar
        self.status_label = ctk.CTkLabel(
            self.root,
            text="‚úÖ BaixaFy pronto para usar!",
            font=ctk.CTkFont(size=12),
            text_color="#1DB954"
        )
        self.status_label.pack(pady=10)
    
    def _verificar_spotdl(self):
        """Verifica se SpotDL est√° funcionando."""
        def verificar():
            try:
                result = subprocess.run(['spotdl', '--version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    versao = result.stdout.strip()
                    self.root.after(0, self._spotdl_ok, versao)
                else:
                    self.root.after(0, self._spotdl_erro, "SpotDL n√£o encontrado")
            except Exception as e:
                self.root.after(0, self._spotdl_erro, str(e))
        
        thread = threading.Thread(target=verificar)
        thread.daemon = True
        thread.start()
    
    def _spotdl_ok(self, versao: str):
        """SpotDL funcionando."""
        self._log(f"‚úÖ SpotDL instalado: {versao}")
        self._atualizar_status("‚úÖ SpotDL funcionando! Pronto para baixar.")
    
    def _spotdl_erro(self, erro: str):
        """Erro no SpotDL."""
        self._log(f"‚ùå Erro no SpotDL: {erro}")
        self._atualizar_status("‚ùå Erro no SpotDL. Verifique instala√ß√£o.")
        
        messagebox.showerror(
            "SpotDL n√£o encontrado",
            "‚ùå SpotDL n√£o est√° funcionando!\n\n"
            "Poss√≠veis solu√ß√µes:\n"
            "‚Ä¢ Verifique se est√° no venv correto\n"
            "‚Ä¢ Execute: pip install spotdl\n"
            "‚Ä¢ Reinicie o BaixaFy"
        )
    
    def _selecionar_pasta(self):
        """Seleciona pasta de destino."""
        pasta = filedialog.askdirectory(
            title="Escolha onde salvar as m√∫sicas",
            initialdir=self.pasta_destino
        )
        if pasta:
            self.pasta_destino = pasta
            self.pasta_entry.delete(0, tk.END)
            self.pasta_entry.insert(0, pasta)
            self._log(f"üìÅ Pasta alterada para: {pasta}")
    
    def _iniciar_download(self):
        """Inicia processo de download."""
        if self.baixando:
            messagebox.showinfo("Download em andamento", "Aguarde o download atual terminar!")
            return
        
        url = self.url_entry.get().strip()
        pasta = self.pasta_entry.get().strip()
        
        # Valida√ß√µes
        if not url:
            messagebox.showwarning("URL vazia", "Cole um link do Spotify!")
            return
        
        if not self._validar_url_spotify(url):
            messagebox.showerror(
                "URL inv√°lida",
                "Use apenas links do Spotify!\n\n"
                "Exemplos v√°lidos:\n"
                "‚Ä¢ https://open.spotify.com/track/...\n"
                "‚Ä¢ https://open.spotify.com/playlist/..."
            )
            return
        
        if not pasta:
            messagebox.showwarning("Pasta inv√°lida", "Escolha uma pasta v√°lida!")
            return
        
        # Criar pasta se necess√°rio
        try:
            Path(pasta).mkdir(parents=True, exist_ok=True)
        except Exception as e:
            messagebox.showerror("Erro na pasta", f"Erro ao criar pasta:\n{e}")
            return
        
        # Iniciar download
        self.baixando = True
        self.btn_download.configure(state="disabled", text="‚è≥ Baixando...")
        self.btn_parar.configure(state="normal")
        self._log(f"üéµ Iniciando download: {url}")
        self._log(f"üìÅ Destino: {pasta}")
        self._atualizar_status("üîÑ Download em andamento...")
        
        # Thread de download
        thread = threading.Thread(target=self._download_thread, args=(url, pasta))
        thread.daemon = True
        thread.start()
    
    def _validar_url_spotify(self, url: str) -> bool:
        """Valida URL do Spotify."""
        patterns = [
            "https://open.spotify.com/track/",
            "https://open.spotify.com/playlist/",
            "https://open.spotify.com/album/",
            "https://spotify.link/"
        ]
        return any(url.startswith(pattern) for pattern in patterns)
    
    def _download_thread(self, url: str, pasta: str):
        """Thread de download."""
        try:
            # Comando SpotDL
            cmd = [
                'spotdl',
                url,
                '--output', pasta,
                '--format', 'mp3',
                '--bitrate', '320k'
            ]
            
            self.root.after(0, self._log, f"üíª Comando: {' '.join(cmd)}")
            
            # Executar com output em tempo real
            self.processo_atual = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                universal_newlines=True,
                bufsize=1
            )
            
            # Ler output em tempo real
            for line in iter(self.processo_atual.stdout.readline, ''):
                if line.strip():
                    self.root.after(0, self._log, f"üîÑ {line.strip()}")
            
            # Aguardar conclus√£o
            return_code = self.processo_atual.wait()
            
            if return_code == 0:
                self.root.after(0, self._download_sucesso, pasta)
            else:
                self.root.after(0, self._download_erro, f"C√≥digo de sa√≠da: {return_code}")
                
        except Exception as e:
            self.root.after(0, self._download_erro, str(e))
        finally:
            self.processo_atual = None
    
    def _parar_download(self):
        """Para download atual."""
        if self.processo_atual:
            try:
                self.processo_atual.terminate()
                self._log("‚èπÔ∏è Download cancelado pelo usu√°rio")
                self._atualizar_status("‚èπÔ∏è Download cancelado")
            except:
                pass
        
        self._finalizar_download()
    
    def _download_sucesso(self, pasta: str):
        """Download conclu√≠do com sucesso."""
        self._log("‚úÖ Download conclu√≠do com sucesso!")
        self._atualizar_status("‚úÖ Download conclu√≠do!")
        
        messagebox.showinfo(
            "Download Conclu√≠do!",
            f"üéâ Suas m√∫sicas foram baixadas!\n\n"
            f"üìÅ Pasta: {pasta}\n\n"
            f"üéµ Agora √© s√≥ curtir!"
        )
        
        self._finalizar_download()
    
    def _download_erro(self, erro: str):
        """Erro no download."""
        self._log(f"‚ùå Erro no download: {erro}")
        self._atualizar_status("‚ùå Erro no download")
        
        messagebox.showerror(
            "Erro no Download",
            f"‚ùå Erro ao baixar m√∫sica:\n\n{erro}\n\n"
            f"Poss√≠veis causas:\n"
            f"‚Ä¢ M√∫sica n√£o dispon√≠vel no YouTube\n"
            f"‚Ä¢ Problemas de conex√£o\n"
            f"‚Ä¢ URL inv√°lida ou expirada"
        )
        
        self._finalizar_download()
    
    def _finalizar_download(self):
        """Finaliza processo de download."""
        self.baixando = False
        self.btn_download.configure(state="normal", text="‚¨áÔ∏è Baixar")
        self.btn_parar.configure(state="disabled")
    
    def _log(self, mensagem: str):
        """Adiciona mensagem ao log."""
        timestamp = time.strftime("%H:%M:%S")
        linha = f"[{timestamp}] {mensagem}\n"
        
        self.log_textbox.insert("end", linha)
        self.log_textbox.see("end")  # Scroll para o fim
    
    def _atualizar_status(self, mensagem: str):
        """Atualiza status bar."""
        self.status_label.configure(text=mensagem)
        
        # Cores baseadas no √≠cone
        if "‚úÖ" in mensagem or "üéâ" in mensagem:
            self.status_label.configure(text_color="#1DB954")
        elif "‚ùå" in mensagem:
            self.status_label.configure(text_color="#dc3545")
        elif "‚ö†Ô∏è" in mensagem:
            self.status_label.configure(text_color="#ffc107")
        elif "üîÑ" in mensagem or "‚è≥" in mensagem:
            self.status_label.configure(text_color="#17a2b8")
    
    def executar(self):
        """Executa aplica√ß√£o."""
        # Log inicial
        self._log("üéµ BaixaFy iniciado!")
        self._log("üìã Vers√£o port√°til com Python embeddable")
        self._log("üîç Verificando SpotDL...")
        
        # Executar
        self.root.mainloop()

def main():
    """Fun√ß√£o principal."""
    try:
        app = BaixaFyInterface()
        app.executar()
    except Exception as e:
        messagebox.showerror("Erro Fatal", f"Erro ao iniciar BaixaFy:\n{e}")
        sys.exit(1)

if __name__ == "__main__":
    main()