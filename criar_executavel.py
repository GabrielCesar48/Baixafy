#!/usr/bin/env python3
"""
Script para criar execut√°vel port√°til do BaixaFy.
Gera um arquivo .exe que funciona direto, sem precisar instalar nada.

Uso: python criar_executavel.py
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def verificar_arquivos():
    """Verifica se arquivos necess√°rios existem."""
    print("üîç Verificando arquivos...")
    
    if not Path('baixafy.py').exists():
        print("‚ùå Arquivo 'baixafy.py' n√£o encontrado!")
        return False
    
    print("‚úÖ Arquivo baixafy.py encontrado")
    return True

def verificar_python():
    """Verifica Python."""
    try:
        result = subprocess.run([sys.executable, '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Python: {result.stdout.strip()}")
            return True
    except:
        pass
    
    print("‚ùå Python n√£o encontrado!")
    return False

def instalar_dependencias():
    """Instala depend√™ncias necess√°rias."""
    print("üì¶ Instalando depend√™ncias...")
    
    dependencias = [
        'customtkinter>=5.2.1',
        'yt-dlp>=2023.12.30',        # Substitui spotdl
        'pillow>=10.0.0',
        'pyinstaller>=6.2.0',
        'requests>=2.31.0'
    ]
    
    try:
        for dep in dependencias:
            print(f"  Instalando {dep.split('>=')[0]}...")
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install', dep
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode != 0:
                print(f"  ‚ö†Ô∏è Aviso: {dep} pode ter falhado")
        
        print("‚úÖ Depend√™ncias instaladas!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def criar_executavel():
    """Cria execut√°vel com PyInstaller - TODAS as depend√™ncias embarcadas."""
    print("üî® Criando execut√°vel COMPLETO...")
    print("   Isso pode demorar alguns minutos...")
    
    try:
        # Comando PyInstaller com TODAS as depend√™ncias embarcadas
        cmd = [
            sys.executable, '-m', 'PyInstaller',
            '--onefile',                           # Arquivo √∫nico
            '--windowed',                          # Sem console
            '--name', 'BaixaFy',                   # Nome do execut√°vel
            '--clean',                             # Limpar builds anteriores
            
            # Incluir TODAS as depend√™ncias necess√°rias
            '--hidden-import', 'customtkinter',
            '--hidden-import', 'yt_dlp',
            '--hidden-import', 'yt_dlp.extractor',
            '--hidden-import', 'yt_dlp.downloader',
            '--hidden-import', 'yt_dlp.postprocessor',
            '--hidden-import', 'PIL',
            '--hidden-import', 'PIL.Image',
            '--hidden-import', 'PIL.ImageTk',
            '--hidden-import', 'requests',
            '--hidden-import', 'urllib.request',
            '--hidden-import', 'urllib.parse',
            '--hidden-import', 'json',
            '--hidden-import', 'threading',
            '--hidden-import', 'tkinter',
            '--hidden-import', 'tkinter.messagebox',
            '--hidden-import', 'tkinter.filedialog',
            '--hidden-import', 'pathlib',
            '--hidden-import', 'winreg',
            
            # Excluir m√≥dulos desnecess√°rios para reduzir tamanho
            '--exclude-module', 'matplotlib',
            '--exclude-module', 'numpy',
            '--exclude-module', 'pandas',
            '--exclude-module', 'scipy',
            '--exclude-module', 'IPython',
            '--exclude-module', 'jupyter',
            '--exclude-module', 'notebook',
            '--exclude-module', 'tkinter.test',
            '--exclude-module', 'unittest',
            '--exclude-module', 'pydoc',
            '--exclude-module', 'doctest',
            '--exclude-module', 'test',
            
            # Incluir dados necess√°rios do yt-dlp
            '--collect-data', 'yt_dlp',
            '--collect-binaries', 'yt_dlp',
            
            # Otimiza√ß√µes
            '--strip',                             # Remove s√≠mbolos debug
            '--optimize', '2'                      # Otimiza√ß√£o m√°xima
        ]
        
        # Adicionar √≠cone se existir
        if Path('baixafy_icon.ico').exists():
            cmd.extend(['--icon', 'baixafy_icon.ico'])
            print("üé® √çcone encontrado, ser√° inclu√≠do")
        
        cmd.append('baixafy.py')
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=900)  # 15 min timeout
        
        if result.returncode == 0:
            print("‚úÖ Execut√°vel COMPLETO criado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro na cria√ß√£o:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout (mais de 15 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def organizar_arquivo():
    """Organiza o arquivo final."""
    print("üìÅ Organizando arquivo...")
    
    exe_path = Path('dist/BaixaFy.exe')
    
    if not exe_path.exists():
        print("‚ùå Execut√°vel n√£o foi criado!")
        return False
    
    # Verificar tamanho
    size_mb = exe_path.stat().st_size / (1024 * 1024)
    print(f"üìä Tamanho: {size_mb:.1f} MB")
    
    # Mover para pasta atual
    dest_path = Path('BaixaFy.exe')
    if dest_path.exists():
        dest_path.unlink()
    
    shutil.copy2(exe_path, dest_path)
    print(f"‚úÖ Execut√°vel pronto: {dest_path.absolute()}")
    
    return True

def limpar_temporarios():
    """Remove arquivos tempor√°rios."""
    print("üßπ Limpando tempor√°rios...")
    
    try:
        # Pastas para remover
        pastas = ['build', 'dist', '__pycache__']
        for pasta in pastas:
            pasta_path = Path(pasta)
            if pasta_path.exists():
                shutil.rmtree(pasta_path)
                print(f"üóëÔ∏è Removido: {pasta}")
        
        # Arquivos para remover
        import glob
        for arquivo in glob.glob('*.spec'):
            Path(arquivo).unlink()
            print(f"üóëÔ∏è Removido: {arquivo}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na limpeza: {e}")
        return False

def criar_instrucoes():
    """Cria arquivo com instru√ß√µes."""
    try:
        instrucoes = f'''üéµ BaixaFy - Execut√°vel Port√°til COMPLETO
==========================================

‚úÖ EXECUT√ÅVEL PORT√ÅTIL CRIADO COM SUCESSO!

üì¶ ARQUIVO GERADO:
‚Ä¢ BaixaFy.exe (~40-60 MB)

üöÄ COMO USAR:

1. EXECU√á√ÉO SIMPLES:
   ‚Ä¢ Execute BaixaFy.exe
   ‚Ä¢ Python + yt-dlp j√° est√£o embarcados!
   ‚Ä¢ Funciona em qualquer PC Windows 10/11

2. FUNCIONALIDADES:
   ‚Ä¢ Interface moderna estilo Spotify
   ‚Ä¢ Cole link do Spotify (m√∫sica ou playlist)
   ‚Ä¢ Converte automaticamente para busca no YouTube
   ‚Ä¢ Selecione m√∫sicas para baixar
   ‚Ä¢ Escolha pasta de destino
   ‚Ä¢ Download em MP3 320kbps

‚ö†Ô∏è REQUISITO IMPORTANTE - FFMPEG:
O BaixaFy precisa do FFmpeg para converter v√≠deos em MP3.

INSTALA√á√ÉO R√ÅPIDA DO FFMPEG:
1. Abra PowerShell como Administrador
2. Execute: choco install ffmpeg
   (Se n√£o tiver Chocolatey, o BaixaFy mostrar√° instru√ß√µes)
3. Reinicie o BaixaFy

‚úÖ VANTAGENS DESTA VERS√ÉO:
‚Ä¢ Python + yt-dlp embarcados no execut√°vel
‚Ä¢ Converte links Spotify ‚Üí busca YouTube ‚Üí MP3
‚Ä¢ Interface limpa e intuitiva
‚Ä¢ Funciona offline ap√≥s FFmpeg instalado
‚Ä¢ Verdadeiramente port√°til

üéØ REQUISITOS NO PC DE DESTINO:
‚Ä¢ Windows 10/11 x64
‚Ä¢ FFmpeg (instru√ß√µes aparecem no app)
‚Ä¢ Conex√£o com internet (para downloads)

üí° COMO FUNCIONA:
1. Voc√™ cola link do Spotify
2. BaixaFy extrai informa√ß√µes da URL
3. Busca m√∫sicas equivalentes no YouTube
4. Baixa e converte para MP3 320kbps
5. Salva na pasta escolhida

üì§ DISTRIBUI√á√ÉO:
‚Ä¢ Envie apenas BaixaFy.exe
‚Ä¢ Usu√°rio executa e segue instru√ß√µes
‚Ä¢ App mostra avisos se FFmpeg n√£o estiver instalado
‚Ä¢ Processo guiado e intuitivo

üéµ DIVIRTA-SE BAIXANDO SUAS M√öSICAS!
Agora funciona: Spotify ‚Üí YouTube ‚Üí MP3

Data de cria√ß√£o: {__import__('time').strftime('%d/%m/%Y %H:%M')}
=========================================='''
        
        with open('INSTRU√á√ïES - BaixaFy Port√°til COMPLETO.txt', 'w', encoding='utf-8') as f:
            f.write(instrucoes)
        
        print("‚úÖ Instru√ß√µes criadas!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar instru√ß√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("=" * 60)
    print("üéµ BAIXAFY - CRIADOR DE EXECUT√ÅVEL PORT√ÅTIL COMPLETO")
    print("=" * 60)
    print("Criando execut√°vel com TODAS as depend√™ncias embarcadas!")
    print("Usu√°rio executa e funciona - ZERO instala√ß√µes necess√°rias!")
    print()
    
    # Etapas
    etapas = [
        ("Verificando arquivos", verificar_arquivos),
        ("Verificando Python", verificar_python),
        ("Instalando depend√™ncias", instalar_dependencias),
        ("Criando execut√°vel COMPLETO", criar_executavel),
        ("Organizando arquivo", organizar_arquivo),
        ("Criando instru√ß√µes", criar_instrucoes),
        ("Limpando tempor√°rios", limpar_temporarios)
    ]
    
    for i, (descricao, funcao) in enumerate(etapas, 1):
        print(f"[{i}/{len(etapas)}] {descricao}...")
        
        if not funcao():
            print(f"\n‚ùå Falha na etapa: {descricao}")
            return False
        
        print()
    
    # Sucesso!
    print("=" * 60)
    print("üéâ EXECUT√ÅVEL PORT√ÅTIL COMPLETO CRIADO!")
    print("=" * 60)
    print()
    print("üì¶ ARQUIVO CRIADO:")
    print("‚úÖ BaixaFy.exe (~40-60 MB)")
    print("‚úÖ INSTRU√á√ïES - BaixaFy Port√°til COMPLETO.txt")
    print()
    print("üéØ COMO FUNCIONA AGORA:")
    print("‚Ä¢ Execute BaixaFy.exe = interface moderna do BaixaFy")
    print("‚Ä¢ ZERO instala√ß√µes necess√°rias!")
    print("‚Ä¢ Python + yt-dlp + todas bibliotecas embarcadas")
    print("‚Ä¢ Cole links do Spotify")
    print("‚Ä¢ Baixe m√∫sicas em MP3 320kbps")
    print("‚Ä¢ Funciona em qualquer PC Windows")
    print()
    print("üì§ DISTRIBUI√á√ÉO:")
    print("‚Ä¢ Envie APENAS BaixaFy.exe")
    print("‚Ä¢ N√£o precisa de instru√ß√µes complicadas")
    print("‚Ä¢ Usu√°rio executa e funciona imediatamente")
    print("‚Ä¢ Verdadeiramente port√°til!")
    print()
    print("üéµ Seu execut√°vel COMPLETO est√° pronto!")
    print("üöÄ Agora √© s√≥ executar e usar - sem instalar nada!")
    
    return True

if __name__ == "__main__":
    try:
        sucesso = main()
        if not sucesso:
            print("\n‚ùå Processo falhou.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Cancelado.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        sys.exit(1)